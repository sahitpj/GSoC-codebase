1	Code	_	NOUN	NN	_	2	nn	_	_
2	refactoring	_	NOUN	NN	_	5	nsubj	_	_
3	is	_	VERB	VBZ	_	5	cop	_	_
4	the	_	DET	DT	_	5	det	_	_
5	process	_	NOUN	NN	_	0	ROOT	_	_
6	of	_	ADP	IN	_	5	prep	_	_
7	restructuring	_	VERB	VBG	_	6	pcomp	_	_
8	existing	_	VERB	VBG	_	10	amod	_	_
9	computer	_	NOUN	NN	_	10	nn	_	_
10	code	_	NOUN	NN	_	7	dobj	_	_
11	changing	_	VERB	VBG	_	10	partmod	_	_
12	the	_	DET	DT	_	13	det	_	_
13	factoring	_	NOUN	NN	_	11	dobj	_	_
14	without	_	ADP	IN	_	11	prep	_	_
15	changing	_	VERB	VBG	_	14	pcomp	_	_
16	its	_	PRON	PRP$	_	18	poss	_	_
17	external	_	ADJ	JJ	_	18	amod	_	_
18	behavior.	_	NOUN	NN	_	15	dobj	_	_
19	Refactoring	_	NOUN	NNP	_	20	nsubj	_	_
20	improves	_	VERB	VBZ	_	18	rcmod	_	_
21	nonfunctional	_	ADJ	JJ	_	22	amod	_	_
22	attributes	_	NOUN	NNS	_	20	dobj	_	_
23	of	_	ADP	IN	_	22	prep	_	_
24	the	_	DET	DT	_	26	det	_	_
25	software.	_	NOUN	NN	_	26	nn	_	_
26	Advantages	_	NOUN	NNPS	_	23	pobj	_	_
27	include	_	VERB	VBP	_	5	partmod	_	_
28	improved	_	ADJ	JJ	_	30	amod	_	_
29	code	_	NOUN	NN	_	30	nn	_	_
30	readability	_	NOUN	NN	_	27	dobj	_	_
31	and	_	CONJ	CC	_	30	cc	_	_
32	reduced	_	VERB	VBN	_	33	amod	_	_
33	complexity	_	NOUN	NN	_	30	conj	_	_
34	to	_	PRT	TO	_	35	aux	_	_
35	improve	_	VERB	VB	_	33	infmod	_	_
36	source	_	NOUN	NN	_	37	nn	_	_
37	code	_	NOUN	NN	_	38	nn	_	_
38	maintainability	_	NOUN	NN	_	35	dobj	_	_
39	,	_	.	,	_	5	punct	_	_
40	and	_	CONJ	CC	_	5	cc	_	_
41	create	_	VERB	VB	_	5	conj	_	_
42	a	_	DET	DT	_	46	det	_	_
43	more	_	ADV	RBR	_	44	advmod	_	_
44	expressive	_	ADJ	JJ	_	46	amod	_	_
45	internal	_	ADJ	JJ	_	46	amod	_	_
46	architecture	_	NOUN	NN	_	41	dobj	_	_
47	or	_	CONJ	CC	_	46	cc	_	_
48	object	_	NOUN	NN	_	49	nn	_	_
49	model	_	NOUN	NN	_	46	conj	_	_
50	to	_	PRT	TO	_	51	aux	_	_
51	improve	_	VERB	VB	_	41	xcomp	_	_
52	extensibility.	_	NOUN	NN	_	51	dobj	_	_
53	Typically	_	ADV	RB	_	56	advmod	_	_
54	,	_	.	,	_	56	punct	_	_
55	refactoring	_	VERB	VBG	_	56	nsubj	_	_
56	applies	_	VERB	VBZ	_	51	dep	_	_
57	a	_	DET	DT	_	58	det	_	_
58	series	_	NOUN	NN	_	56	dobj	_	_
59	of	_	ADP	IN	_	58	prep	_	_
60	standardised	_	VERB	VBN	_	62	amod	_	_
61	basic	_	ADJ	JJ	_	62	amod	_	_
62	micro-refactorings	_	NOUN	NNS	_	59	pobj	_	_
63	,	_	.	,	_	62	punct	_	_
64	each	_	DET	DT	_	73	nsubj	_	_
65	of	_	ADP	IN	_	64	prep	_	_
66	which	_	DET	WDT	_	65	pobj	_	_
67	is	_	VERB	VBZ	_	73	cop	_	_
68	-LRB-	_	.	-LRB-	_	73	punct	_	_
69	usually	_	ADV	RB	_	73	advmod	_	_
70	-RRB-	_	.	-RRB-	_	73	punct	_	_
71	a	_	DET	DT	_	73	det	_	_
72	tiny	_	ADJ	JJ	_	73	amod	_	_
73	change	_	NOUN	NN	_	62	rcmod	_	_
74	in	_	ADP	IN	_	73	prep	_	_
75	a	_	DET	DT	_	77	det	_	_
76	computer	_	NOUN	NN	_	77	nn	_	_
77	program	_	NOUN	NN	_	80	poss	_	_
78	's	_	PRT	POS	_	77	possessive	_	_
79	source	_	NOUN	NN	_	80	nn	_	_
80	code	_	NOUN	NN	_	74	pobj	_	_
81	that	_	DET	WDT	_	83	nsubj	_	_
82	either	_	CONJ	CC	_	83	preconj	_	_
83	preserves	_	VERB	VBZ	_	73	rcmod	_	_
84	the	_	DET	DT	_	85	det	_	_
85	behaviour	_	NOUN	NN	_	83	dobj	_	_
86	of	_	ADP	IN	_	85	prep	_	_
87	the	_	DET	DT	_	88	det	_	_
88	software	_	NOUN	NN	_	86	pobj	_	_
89	,	_	.	,	_	83	punct	_	_
90	or	_	CONJ	CC	_	83	cc	_	_
91	at	_	ADV	RB	_	92	advmod	_	_
92	least	_	ADV	RBS	_	95	advmod	_	_
93	does	_	VERB	VBZ	_	95	aux	_	_
94	not	_	ADV	RB	_	95	neg	_	_
95	modify	_	VERB	VB	_	83	conj	_	_
96	its	_	PRON	PRP$	_	97	poss	_	_
97	conformance	_	NOUN	NN	_	95	dobj	_	_
98	to	_	ADP	IN	_	95	prep	_	_
99	functional	_	ADJ	JJ	_	100	amod	_	_
100	requirements.	_	NOUN	NNS	_	103	nn	_	_
101	Many	_	ADJ	JJ	_	103	amod	_	_
102	development	_	NOUN	NN	_	103	nn	_	_
103	environments	_	NOUN	NNS	_	98	pobj	_	_
104	provide	_	VERB	VBP	_	83	dep	_	_
105	automated	_	VERB	VBN	_	106	amod	_	_
106	support	_	NOUN	NN	_	104	dobj	_	_
107	for	_	ADP	IN	_	106	prep	_	_
108	performing	_	VERB	VBG	_	107	pcomp	_	_
109	the	_	DET	DT	_	111	det	_	_
110	mechanical	_	ADJ	JJ	_	111	amod	_	_
111	aspects	_	NOUN	NNS	_	108	dobj	_	_
112	of	_	ADP	IN	_	111	prep	_	_
113	these	_	DET	DT	_	115	det	_	_
114	basic	_	ADJ	JJ	_	115	amod	_	_
115	refactorings.	_	NOUN	NNS	_	112	pobj	_	_
116	If	_	ADP	IN	_	117	mark	_	_
117	done	_	VERB	VBN	_	125	advcl	_	_
118	extremely	_	ADV	RB	_	119	advmod	_	_
119	well	_	ADV	RB	_	117	advmod	_	_
120	,	_	.	,	_	125	punct	_	_
121	code	_	NOUN	NN	_	122	nn	_	_
122	refactoring	_	VERB	VBG	_	125	nsubj	_	_
123	may	_	VERB	MD	_	125	aux	_	_
124	also	_	ADV	RB	_	125	advmod	_	_
125	resolve	_	VERB	VB	_	83	ccomp	_	_
126	hidden	_	VERB	VBN	_	133	amod	_	_
127	,	_	.	,	_	126	punct	_	_
128	dormant	_	ADJ	JJ	_	126	conj	_	_
129	,	_	.	,	_	126	punct	_	_
130	or	_	CONJ	CC	_	126	cc	_	_
131	undiscovered	_	VERB	VBD	_	126	conj	_	_
132	computer	_	NOUN	NN	_	133	nn	_	_
133	bugs	_	NOUN	NNS	_	125	dobj	_	_
134	or	_	CONJ	CC	_	133	cc	_	_
135	vulnerabilities	_	NOUN	NNS	_	133	conj	_	_
136	in	_	ADP	IN	_	133	prep	_	_
137	the	_	DET	DT	_	138	det	_	_
138	system	_	NOUN	NN	_	136	pobj	_	_
139	by	_	ADP	IN	_	125	prep	_	_
140	simplifying	_	VERB	VBG	_	139	pcomp	_	_
141	the	_	DET	DT	_	143	det	_	_
142	underlying	_	VERB	VBG	_	143	amod	_	_
143	logic	_	NOUN	NN	_	140	dobj	_	_
144	and	_	CONJ	CC	_	140	cc	_	_
145	eliminating	_	VERB	VBG	_	140	conj	_	_
146	unnecessary	_	ADJ	JJ	_	147	amod	_	_
147	levels	_	NOUN	NNS	_	145	dobj	_	_
148	of	_	ADP	IN	_	147	prep	_	_
149	complexity.	_	NOUN	NN	_	148	pobj	_	_
150	If	_	ADP	IN	_	151	mark	_	_
151	done	_	VERB	VBN	_	155	advcl	_	_
152	poorly	_	ADV	RB	_	151	advmod	_	_
153	it	_	PRON	PRP	_	155	nsubj	_	_
154	may	_	VERB	MD	_	155	aux	_	_
155	fail	_	VERB	VB	_	145	parataxis	_	_
156	the	_	DET	DT	_	157	det	_	_
157	requirement	_	NOUN	NN	_	155	dobj	_	_
158	that	_	ADP	IN	_	163	mark	_	_
159	external	_	ADJ	JJ	_	160	amod	_	_
160	functionality	_	NOUN	NN	_	163	nsubjpass	_	_
161	not	_	ADV	RB	_	163	neg	_	_
162	be	_	VERB	VB	_	163	auxpass	_	_
163	changed	_	VERB	VBN	_	157	ccomp	_	_
164	,	_	.	,	_	83	punct	_	_
165	and/or	_	CONJ	CC	_	83	cc	_	_
166	introduce	_	VERB	VB	_	83	conj	_	_
167	new	_	ADJ	JJ	_	168	amod	_	_
168	bugs	_	NOUN	NNS	_	166	dobj	_	_
169	.	_	.	.	_	0	ROOT	_	_

